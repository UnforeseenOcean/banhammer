"""
Django settings for banhammer project.

Generated by 'django-admin startproject' using Django 1.9.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

from ConfigParser import SafeConfigParser
import os

from django.contrib.messages import constants as messages
from django.utils.crypto import get_random_string

# Load configuration
config_filename = 'config.ini'
config = SafeConfigParser()
config.read(config_filename)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
if config.has_option('django', 'secret_key'):
    SECRET_KEY = config.get('django', 'secret_key')
else:
    SECRET_KEY = get_random_string(50)
    config.set('django', 'secret_key', SECRET_KEY)
    with open(config_filename, 'wb') as config_file:
        config.write(config_file)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.getboolean('django', 'debug')

# App is being served over SSL so protect cookies
CSRF_COOKIE_SECURE = config.get('django', 'ssl')
SESSION_COOKIE_SECURE = config.get('django', 'ssl')
SESSION_COOKIE_AGE = 3600

ALLOWED_HOSTS = ['*']


# Rest framework classes
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    )
}

# Disable web browsable API
# See
# http://masnun.com/2016/04/20/django-rest-framework-remember-to-disable-web-browsable-api-in-production.html
if config.getboolean('django', 'api_auth'):
    REST_FRAMEWORK['DEFAULT_PERMISSION_CLASSES'] = (
        'rest_framework.permissions.IsAuthenticated',
    )
    REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'] = (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )

# Group naming settings
GROUP_PERMISSIONS_ENABLED = False
if config.getboolean('group_permissions', 'enabled'):
    GROUP_PERMISSIONS_ENABLED = True

GROUP_NAMES = {
    'ALL_READWRITE': config.get('group_permissions', 'all_readwrite_group'),
    'IPADDR_READWRITE': config.get('group_permissions', 'ipaddr_readwrite_group'),
    'DOMAIN_READWRITE': config.get('group_permissions', 'domain_readwrite_group'),
    'URL_READWRITE': config.get('group_permissions', 'url_readwrite_group'),
    'HASH_READWRITE': config.get('group_permissions', 'hash_readwrite_group'),
    'USER_READWRITE': config.get('group_permissions', 'user_readwrite_group'),
}

# Web authentication settings
SAML2_ENABLED = False
WEB_AUTH_ENABLED = False
if config.getboolean('django', 'web_auth') and config.getboolean('saml2', 'enabled'):
    WEB_AUTH_ENABLED = True
    SAML2_ENABLED = True

# Login URL
# See https://docs.djangoproject.com/en/1.9/ref/settings/#std:setting-LOGIN_URL
if SAML2_ENABLED:
    LOGIN_URL = '/saml2/signin/'

if SAML2_ENABLED:
    # SAML2 authentication settings
    SAML2_AUTH = {
        # Required settings
        'METADATA_AUTO_CONF_URL': config.get('saml2', 'metadata_url'),
        'SSP_LOGIN_URL': config.get('saml2', 'login_url'),

        # Optional settings
        'ATTRIBUTES_MAP': {
            'email': config.get('saml2', 'email_attr'),
            'username': config.get('saml2', 'username_attr'),
            'first_name': config.get('saml2', 'firstname_attr'),
            'last_name': config.get('saml2', 'lastname_attr'),
            'groups': config.get('saml2', 'group_attr'),
        },
    }


# Messages color fix
# See https://github.com/dyve/django-bootstrap3/issues/72
MESSAGE_TAGS = {
    messages.ERROR: 'danger'
}


# Application definition
INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'api.apps.ApiConfig',
    'ebl.apps.EblConfig',
    'web.apps.WebConfig',
    'djangosaml2.apps.Djangosaml2Config',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'banhammer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'banhammer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config.get('postgresql', 'db_name'),
        'USER': config.get('postgresql', 'user'),
        'PASSWORD': config.get('postgresql', 'password'),
        'HOST': config.get('postgresql', 'db_host'),
        'PORT': config.get('postgresql', 'db_port'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = config.get('django', 'web_static_root')


# Logging configuration
# https://docs.djangoproject.com/ja/1.9/topics/logging/
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '%(asctime)s %(levelname)s %(name)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': config.get('django', 'log_path'),
            'formatter': 'default'
        },
    },
    'loggers': {
        'api': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
